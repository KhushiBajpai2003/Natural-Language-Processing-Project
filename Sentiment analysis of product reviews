{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP7kGKkh3g7/SULRy7Xq4dJ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import classification_report\n","\n","df = pd.read_csv('/content/Reviews.csv')"],"metadata":{"id":"XVsaNHL_HPNU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import re\n","import nltk\n","from nltk.corpus import stopwords\n","from nltk.tokenize import word_tokenize\n","from nltk.stem import WordNetLemmatizer\n","\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","\n","def preprocess_text(text):\n","  if isinstance(text, str):\n","    text = re.sub('<[^<]+?>', ' ', text)\n","    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text)\n","    text = text.lower()\n","\n","    tokens = word_tokenize(text)\n","\n","    stop_words = set(stopwords.words('english'))\n","    tokens = [token for token in tokens if token not in stop_words]\n","\n","    lemmatizer = WordNetLemmatizer()\n","    tokens = [lemmatizer.lemmatize(token) for token in tokens]\n","\n","    preprocessed_text = ' '.join(tokens)\n","    return preprocessed_text\n","  else:\n","      return ''\n","\n","df['Preprocessed_Text'] = df['Text'].apply(preprocess_text)\n","\n","print(df['Preprocessed_Text'].head(10))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XwVNdv8sawyh","executionInfo":{"status":"ok","timestamp":1712586759448,"user_tz":-330,"elapsed":14978,"user":{"displayName":"D_09_ Sakshi Fadnavis","userId":"03529767819078202026"}},"outputId":"e58e5cad-4318-43a9-ed82-a9d444b5efa1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Package punkt is already up-to-date!\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Package stopwords is already up-to-date!\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Package wordnet is already up-to-date!\n"]},{"output_type":"stream","name":"stdout","text":["0    bought several vitality canned dog food produc...\n","1    product arrived labeled jumbo salted peanutsth...\n","2    confection around century light pillowy citrus...\n","3    looking secret ingredient robitussin believe f...\n","4    great taffy great price wide assortment yummy ...\n","5    got wild hair taffy ordered five pound bag taf...\n","6    saltwater taffy great flavor soft chewy candy ...\n","7    taffy good soft chewy flavor amazing would def...\n","8    right im mostly sprouting cat eat grass love r...\n","9    healthy dog food good digestion also good smal...\n","Name: Preprocessed_Text, dtype: object\n"]}]},{"cell_type":"code","source":["from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","tfidf_vectorizer = TfidfVectorizer(max_features=1000)\n","\n","X_tfidf = tfidf_vectorizer.fit_transform(df['Preprocessed_Text'])\n","\n","print(\"Shape of TF-IDF matrix:\", X_tfidf.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hXBUiUOAIXnd","executionInfo":{"status":"ok","timestamp":1712587010388,"user_tz":-330,"elapsed":1722,"user":{"displayName":"D_09_ Sakshi Fadnavis","userId":"03529767819078202026"}},"outputId":"f86b8aab-41de-41ca-cba2-0792f1a51ea7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Shape of TF-IDF matrix: (16243, 1000)\n"]}]},{"cell_type":"code","source":["feature_names = tfidf_vectorizer.get_feature_names_out()\n","print(\"Feature names:\", feature_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tXuVKygBIeuF","executionInfo":{"status":"ok","timestamp":1712587011961,"user_tz":-330,"elapsed":17,"user":{"displayName":"D_09_ Sakshi Fadnavis","userId":"03529767819078202026"}},"outputId":"4a9d40b6-9eae-47e1-be91-b6165521f04f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Feature names: ['10' '100' '12' '13' '14' '15' '16' '20' '24' '25' '30' '50' 'able'\n"," 'absolutely' 'acid' 'actual' 'actually' 'add' 'added' 'adding' 'addition'\n"," 'admit' 'adult' 'aftertaste' 'ago' 'agree' 'air' 'allergy' 'almond'\n"," 'almost' 'alone' 'along' 'already' 'also' 'alternative' 'although'\n"," 'always' 'amazing' 'amazon' 'amazoncom' 'amount' 'animal' 'another'\n"," 'anymore' 'anyone' 'anything' 'anyway' 'anywhere' 'apple' 'area' 'arent'\n"," 'aroma' 'around' 'arrived' 'artificial' 'ask' 'ate' 'available' 'average'\n"," 'avoid' 'away' 'awesome' 'awful' 'baby' 'back' 'bad' 'bag' 'baked'\n"," 'baking' 'balance' 'banana' 'bar' 'barley' 'based' 'basically' 'batch'\n"," 'bbq' 'bean' 'beat' 'become' 'bed' 'beef' 'beer' 'believe' 'benefit'\n"," 'berry' 'best' 'better' 'beverage' 'big' 'bigger' 'biscuit' 'bisquick'\n"," 'bit' 'bite' 'bitter' 'bitterness' 'black' 'bland' 'blend' 'blood' 'blue'\n"," 'body' 'bold' 'bone' 'bottle' 'bottom' 'bought' 'bowl' 'box' 'brand'\n"," 'bread' 'break' 'breakfast' 'brew' 'brewed' 'brewer' 'brewing' 'bring'\n"," 'broken' 'brown' 'brownie' 'bulk' 'butter' 'buy' 'buying' 'caffeine'\n"," 'cake' 'call' 'called' 'calorie' 'came' 'can' 'candy' 'canned' 'cant'\n"," 'caramel' 'carb' 'carbonated' 'carbonation' 'carbs' 'care' 'carrot'\n"," 'carry' 'case' 'cat' 'cause' 'cereal' 'certainly' 'chance' 'change'\n"," 'changed' 'cheap' 'cheaper' 'check' 'cheese' 'chemical' 'cherry' 'chew'\n"," 'chewy' 'chia' 'chicken' 'child' 'chili' 'china' 'chip' 'chocolate'\n"," 'choice' 'christmas' 'chunk' 'cinnamon' 'claim' 'clean' 'clear' 'close'\n"," 'coat' 'cocoa' 'coconut' 'coffee' 'cold' 'color' 'combination' 'come'\n"," 'coming' 'comment' 'company' 'compare' 'compared' 'complaint'\n"," 'completely' 'condition' 'consider' 'considering' 'consistency' 'contain'\n"," 'container' 'contains' 'content' 'continue' 'convenience' 'convenient'\n"," 'cook' 'cooked' 'cookie' 'cooking' 'cooky' 'cool' 'corn' 'cost' 'could'\n"," 'couldnt' 'count' 'couple' 'course' 'cracker' 'craving' 'crazy' 'cream'\n"," 'creamer' 'creamy' 'crisp' 'crispy' 'crunch' 'crunchy' 'cube' 'cup'\n"," 'customer' 'cut' 'daily' 'dairy' 'dark' 'date' 'daughter' 'day' 'deal'\n"," 'decaf' 'decent' 'decided' 'definitely' 'delicious' 'delivered'\n"," 'delivery' 'description' 'dessert' 'diamond' 'didnt' 'diet' 'difference'\n"," 'different' 'difficult' 'dinner' 'direction' 'disappointed' 'discovered'\n"," 'dish' 'doesnt' 'dog' 'dollar' 'done' 'dont' 'donut' 'door' 'drawer'\n"," 'dried' 'drink' 'drinker' 'drinking' 'drop' 'dry' 'due' 'earth' 'easier'\n"," 'easily' 'easy' 'eat' 'eaten' 'eater' 'eating' 'eats' 'effect' 'egg'\n"," 'either' 'else' 'end' 'ended' 'energy' 'enjoy' 'enjoyed' 'enough'\n"," 'entire' 'especially' 'espresso' 'etc' 'even' 'ever' 'every' 'everyone'\n"," 'everything' 'exactly' 'excellent' 'except' 'excited' 'expect' 'expected'\n"," 'expecting' 'expensive' 'experience' 'extra' 'extract' 'extremely' 'fact'\n"," 'fair' 'fairly' 'family' 'fan' 'fantastic' 'far' 'fast' 'fat' 'favorite'\n"," 'fed' 'feed' 'feeding' 'feel' 'feeling' 'felt' 'fiber' 'figured' 'fill'\n"," 'filling' 'filter' 'finally' 'find' 'finding' 'fine' 'finish' 'first'\n"," 'fish' 'fit' 'five' 'flavor' 'flavored' 'flavorful' 'flavoring' 'flour'\n"," 'food' 'form' 'formula' 'forward' 'found' 'four' 'free' 'freeze'\n"," 'freezer' 'french' 'fresh' 'fridge' 'friend' 'frozen' 'fruit' 'full'\n"," 'fun' 'future' 'garlic' 'gave' 'generally' 'get' 'getting' 'gf' 'ghee'\n"," 'gift' 'ginger' 'girl' 'give' 'given' 'giving' 'glad' 'glass' 'gluten'\n"," 'glutenfree' 'go' 'goat' 'going' 'gone' 'good' 'got' 'gourmet' 'grain'\n"," 'gram' 'grape' 'grass' 'gravy' 'great' 'green' 'grind' 'grocery' 'ground'\n"," 'guess' 'guest' 'gum' 'guy' 'half' 'hand' 'happy' 'hard' 'hate' 'havent'\n"," 'hazelnut' 'he' 'health' 'healthier' 'healthy' 'heard' 'heat' 'heavy'\n"," 'help' 'high' 'higher' 'highly' 'hint' 'hit' 'hold' 'home' 'homemade'\n"," 'honey' 'hooked' 'hope' 'hoping' 'horrible' 'hot' 'hour' 'house'\n"," 'however' 'huge' 'husband' 'ice' 'iced' 'id' 'idea' 'ill' 'im'\n"," 'immediately' 'important' 'impressed' 'including' 'individual'\n"," 'ingredient' 'inside' 'instant' 'instead' 'instruction' 'isnt' 'issue'\n"," 'item' 'ive' 'jar' 'jelly' 'jerky' 'juice' 'kcup' 'kcups' 'keep' 'kept'\n"," 'kettle' 'keurig' 'kick' 'kid' 'kind' 'kitchen' 'knew' 'know' 'label'\n"," 'lack' 'lamb' 'large' 'larger' 'last' 'later' 'lb' 'le' 'leaf' 'least'\n"," 'leave' 'left' 'lemon' 'let' 'level' 'licorice' 'lid' 'life' 'light'\n"," 'like' 'liked' 'lime' 'line' 'liquid' 'list' 'listed' 'little' 'live'\n"," 'liver' 'local' 'locally' 'long' 'longer' 'look' 'looked' 'looking'\n"," 'loose' 'lot' 'love' 'loved' 'lover' 'low' 'lower' 'lunch' 'machine'\n"," 'made' 'magnesium' 'make' 'maker' 'making' 'many' 'maple' 'market'\n"," 'matter' 'may' 'maybe' 'meal' 'mean' 'meat' 'medium' 'melitta' 'mess'\n"," 'microwave' 'middle' 'might' 'mild' 'milk' 'mill' 'mind' 'mine' 'mint'\n"," 'minute' 'miss' 'mix' 'mixed' 'moist' 'mom' 'money' 'month' 'morning'\n"," 'mostly' 'mother' 'mountain' 'mouth' 'much' 'muffin' 'must' 'name'\n"," 'nasty' 'natural' 'near' 'nearly' 'need' 'needed' 'never' 'new' 'newman'\n"," 'next' 'nice' 'nicely' 'night' 'none' 'noodle' 'normal' 'normally' 'note'\n"," 'nothing' 'notice' 'noticed' 'number' 'nut' 'nutrition' 'nutritional'\n"," 'oat' 'oatmeal' 'offer' 'offered' 'office' 'often' 'oh' 'oil' 'ok' 'okay'\n"," 'old' 'olive' 'one' 'onion' 'online' 'open' 'opened' 'opinion' 'option'\n"," 'orange' 'order' 'ordered' 'ordering' 'oreo' 'organic' 'original'\n"," 'others' 'otherwise' 'ounce' 'outside' 'oven' 'overall' 'overly'\n"," 'overpowering' 'oz' 'pack' 'package' 'packaged' 'packaging' 'packed'\n"," 'packet' 'paid' 'pamelas' 'pancake' 'paper' 'part' 'particular' 'party'\n"," 'past' 'pasta' 'pay' 'paying' 'peanut' 'people' 'pepper' 'peppermint'\n"," 'per' 'perfect' 'perfectly' 'perhaps' 'person' 'personal' 'personally'\n"," 'pet' 'pick' 'picky' 'picture' 'pie' 'piece' 'pill' 'pineapple' 'pizza'\n"," 'place' 'plain' 'plan' 'plant' 'plastic' 'pleasant' 'please' 'pleased'\n"," 'plenty' 'plus' 'pocket' 'pod' 'point' 'pop' 'popcorn' 'pork' 'portion'\n"," 'possible' 'pot' 'potato' 'pouch' 'pound' 'powder' 'powdered' 'prefer'\n"," 'preservative' 'pretty' 'price' 'priced' 'pricey' 'prime' 'probably'\n"," 'problem' 'process' 'product' 'protein' 'puck' 'puppy' 'purchase'\n"," 'purchased' 'purchasing' 'pure' 'put' 'putting' 'quality' 'quantity'\n"," 'quick' 'quickly' 'quite' 'rate' 'rather' 'rating' 'raw' 'read' 'reading'\n"," 'ready' 'real' 'really' 'reason' 'reasonable' 'received' 'recently'\n"," 'recipe' 'recommend' 'recommended' 'red' 'refreshing' 'regular'\n"," 'remember' 'rest' 'restaurant' 'result' 'return' 'review' 'reviewer'\n"," 'rice' 'rich' 'right' 'rind' 'roast' 'roasted' 'rose' 'run' 'running'\n"," 'said' 'salad' 'sale' 'salt' 'salty' 'sample' 'sandwich' 'sardine'\n"," 'satisfied' 'satisfying' 'sauce' 'save' 'saw' 'say' 'sea' 'seal' 'sealed'\n"," 'seasoning' 'second' 'see' 'seed' 'seem' 'seemed' 'seems' 'seen' 'sell'\n"," 'seller' 'sensitive' 'sent' 'serve' 'service' 'serving' 'set' 'setting'\n"," 'several' 'shake' 'shape' 'share' 'shelf' 'shes' 'ship' 'shipment'\n"," 'shipped' 'shipping' 'shop' 'short' 'shot' 'show' 'sick' 'side' 'similar'\n"," 'simple' 'simply' 'since' 'single' 'sip' 'sit' 'site' 'six' 'size' 'skin'\n"," 'slight' 'slightly' 'small' 'smaller' 'smell' 'smooth' 'snack' 'soda'\n"," 'sodium' 'soft' 'sold' 'someone' 'something' 'sometimes' 'somewhat' 'son'\n"," 'soon' 'sort' 'sound' 'soup' 'sour' 'source' 'soy' 'space' 'special'\n"," 'spice' 'spicy' 'square' 'stale' 'stand' 'standard' 'star' 'starbucks'\n"," 'start' 'started' 'state' 'stay' 'steak' 'stevia' 'stick' 'still' 'stock'\n"," 'stomach' 'stop' 'stopped' 'store' 'straight' 'strawberry' 'strong'\n"," 'stronger' 'stuck' 'stuff' 'style' 'subscribe' 'subscription'\n"," 'substitute' 'sugar' 'suggest' 'summer' 'super' 'supermarket' 'supply'\n"," 'supposed' 'sure' 'surprised' 'sweet' 'sweetener' 'sweetness' 'switch'\n"," 'switched' 'syrup' 'system' 'tablespoon' 'tablet' 'take' 'taking'\n"," 'tangerine' 'taste' 'tasted' 'tasting' 'tasty' 'tea' 'teeth' 'tell'\n"," 'tend' 'terrible' 'test' 'texture' 'thank' 'thanks' 'thats' 'there'\n"," 'theyre' 'thick' 'thin' 'thing' 'think' 'thinking' 'though' 'thought'\n"," 'three' 'throw' 'time' 'tiny' 'today' 'tofu' 'together' 'told' 'tomato'\n"," 'took' 'top' 'total' 'totally' 'touch' 'training' 'tray' 'treat' 'tried'\n"," 'trip' 'trouble' 'true' 'truffle' 'truly' 'try' 'trying' 'turn' 'turned'\n"," 'twice' 'two' 'type' 'unfortunately' 'unique' 'unless' 'unlike' 'upon'\n"," 'us' 'use' 'used' 'using' 'usual' 'usually' 'value' 'vanilla' 'variety'\n"," 'various' 'vegetable' 'veggie' 'version' 'vet' 'vinegar' 'vitamin'\n"," 'waffle' 'wait' 'walnut' 'want' 'wanted' 'warm' 'wasnt' 'waste' 'water'\n"," 'way' 'weak' 'website' 'week' 'weight' 'weird' 'well' 'went' 'weve'\n"," 'whatever' 'whats' 'wheat' 'whenever' 'white' 'whole' 'wife' 'wine'\n"," 'wish' 'within' 'without' 'wolfgang' 'wonderful' 'wont' 'word' 'work'\n"," 'worked' 'world' 'worth' 'would' 'wouldnt' 'wow' 'wrong' 'year' 'yes'\n"," 'yet' 'youll' 'youre' 'yummy']\n"]}]},{"cell_type":"code","source":["df.dropna(inplace=True)\n","\n","X_tfidf = tfidf_vectorizer.fit_transform(df['Preprocessed_Text'])\n","y = df['Score']\n","\n","X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y, test_size=0.2, random_state=42)\n","\n","logistic_regression_model = LogisticRegression()\n","\n","logistic_regression_model.fit(X_train, y_train)\n","\n","y_pred_train = logistic_regression_model.predict(X_train)\n","y_pred_test = logistic_regression_model.predict(X_test)\n","\n","train_accuracy = accuracy_score(y_train, y_pred_train)\n","test_accuracy = accuracy_score(y_test, y_pred_test)\n","\n","print(\"Train Accuracy:\", train_accuracy)\n","print(\"Test Accuracy:\", test_accuracy)\n","\n","print(\"Classification Report for Test Data:\")\n","print(classification_report(y_test, y_pred_test))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DoIAIiGedFN6","executionInfo":{"status":"ok","timestamp":1712587264420,"user_tz":-330,"elapsed":3944,"user":{"displayName":"D_09_ Sakshi Fadnavis","userId":"03529767819078202026"}},"outputId":"be1c4570-d6f3-40c8-f789-82272a2a9b53"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Accuracy: 0.7378386699507389\n","Test Accuracy: 0.6789781471221914\n","Classification Report for Test Data:\n","              precision    recall  f1-score   support\n","\n","         1.0       0.62      0.48      0.54       302\n","         2.0       0.43      0.11      0.17       187\n","         3.0       0.39      0.16      0.23       291\n","         4.0       0.39      0.20      0.26       471\n","         5.0       0.73      0.95      0.83      1998\n","\n","    accuracy                           0.68      3249\n","   macro avg       0.51      0.38      0.41      3249\n","weighted avg       0.62      0.68      0.63      3249\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  n_iter_i = _check_optimize_result(\n"]}]},{"cell_type":"code","source":["\n","example_text = \"This product exceeded my expectations. It works perfectly and is worth every penny.\"\n","\n","preprocessed_example_text = preprocess_text(example_text)\n","\n","example_text_vectorized = tfidf_vectorizer.transform([preprocessed_example_text])\n","\n","predicted_sentiment = logistic_regression_model.predict(example_text_vectorized)\n","\n","print(\"Predicted Sentiment:\", predicted_sentiment)\n"],"metadata":{"id":"kDVAaFyDdkIa","executionInfo":{"status":"ok","timestamp":1712587367614,"user_tz":-330,"elapsed":755,"user":{"displayName":"D_09_ Sakshi Fadnavis","userId":"03529767819078202026"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1709f13f-5ebd-45fd-bd70-69867d9eee23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Predicted Sentiment: [5.]\n"]}]},{"cell_type":"code","source":["import random\n","random.seed(42)\n","random_indices = random.sample(range(len(df)), 5)\n","random_examples = df.iloc[random_indices]\n","\n","for index, row in random_examples.iterrows():\n","  example_text = row['Text']\n","  preprocessed_example_text = preprocess_text(example_text)\n","  example_text_vectorized = tfidf_vectorizer.transform([preprocessed_example_text])\n","  predicted_sentiment = logistic_regression_model.predict(example_text_vectorized)[0]\n","  actual_sentiment = row['Score']\n","  print(\"Example Text:\", example_text)\n","  print(\"Actual Sentiment:\", actual_sentiment)\n","  print(\"Predicted Sentiment:\", predicted_sentiment)\n","  print(\"-------------------------------\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UKlaNRlJKxWB","executionInfo":{"status":"ok","timestamp":1712587481465,"user_tz":-330,"elapsed":514,"user":{"displayName":"D_09_ Sakshi Fadnavis","userId":"03529767819078202026"}},"outputId":"12cc23b6-3ea1-4045-f374-acecefbceded"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Example Text: I usually order this item from Amazon since our local grocery stores (Walmart and Safeway) do not carry it, but. . .I would expect that buying in bulk would be cheaper, but instead, six bags of 26.4 ounces is eight cents PER OUNCE more expensive than buying six boxes of 11.5 ounces.  Shouldn't it be the other way around? This is not a savings at all.\n","Actual Sentiment: 3.0\n","Predicted Sentiment: 5.0\n","-------------------------------\n","Example Text: The chips are good with fast service but I ordered a case(24) of Popchips 6-flavor Variety Pack and received 24 bags all Barbecue flavored.\n","Actual Sentiment: 5.0\n","Predicted Sentiment: 5.0\n","-------------------------------\n","Example Text: I ordered this product at the same time as the Kirkland Signature salmon.  The Raincoast Trading Co. salmon is very tasty, equally as good quality salmon as the Kirkland.  However, the Raincoast arrived in perfect condition, the Kirkland cans were dented badly.  I recommend this product to anyone who likes boneless skinless canned salmon.\n","Actual Sentiment: 5.0\n","Predicted Sentiment: 5.0\n","-------------------------------\n","Example Text: My thirteen year old Yorkshire Terrier loves Dogswell Happy Hips Chicken breast strips and the glucosomine has helped her arthritis a great deal.  She jumps and runs like a puppy again!  My five year old yorkie loves them too!  I highly recommend this product.\n","Actual Sentiment: 5.0\n","Predicted Sentiment: 5.0\n","-------------------------------\n","Example Text: Melitta's Riviera Sunset Decaffeinated Ground Coffee turned out to be a good basic coffee - not bitter, not burned-tasting, a well-rounded mellow brew that tastes like real coffee. I had it this morning with almond milk, stevia and a pinch of cinnamon, and though I'd had a bad night and didn't even know if I could handle coffee, it was delicious and easy on a morning tummy. Besides brewing it alone to get a nice decaffeinated coffee for night-time drinking (especially in the winter), we've been mixing it with regular coffee in various blends, depending on our caffeine-related needs at the time.<br /><br />The packaging is practical and easy to re-close and the grind is good for my automatic coffeemaker. I will buy this one again.\n","Actual Sentiment: 4.0\n","Predicted Sentiment: 4.0\n","-------------------------------\n"]}]}]}